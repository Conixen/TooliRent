// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TooliRent.Infrastructure.Data;

#nullable disable

namespace TooliRent.Infrastructure.Migrations
{
    [DbContext(typeof(TooliRentContext))]
    [Migration("20250929204221_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TooliRent.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categorys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Elektriska verktyg för byggarbete och hantverk",
                            Name = "Elverktyg"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Traditionella handverktyg för precision och detaljarbete",
                            Name = "Handverktyg"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Verktyg för mätning och märkning",
                            Name = "Mätverktyg"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Skyddsutrustning för säkert arbete",
                            Name = "Säkerhetsutrustning"
                        });
                });

            modelBuilder.Entity("TooliRent.Models.OrderDeatils", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CheckedOutAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date2Hire")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date2Return")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LateFee")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.HasIndex("ToolId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderDeatils");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheckedOutAt = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date2Hire = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date2Return = new DateTime(2025, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LateFee = 0.00m,
                            ReturnedAt = new DateTime(2025, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Returned",
                            ToolId = 2,
                            TotalPrice = 105.00m,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("TooliRent.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CanceledAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CanceledReason")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date2Hire")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date2Return")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanceledAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date2Hire = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date2Return = new DateTime(2025, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("TooliRent.Models.ReservationTool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EstimatedDays")
                        .HasColumnType("int");

                    b.Property<decimal>("EstimatedPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ToolId");

                    b.HasIndex("ReservationId", "ToolId")
                        .IsUnique();

                    b.ToTable("ReservationTools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EstimatedDays = 3,
                            EstimatedPrice = 135.00m,
                            Notes = "Behöver för borrning i betong",
                            ReservationId = 1,
                            ToolId = 1
                        },
                        new
                        {
                            Id = 2,
                            EstimatedDays = 7,
                            EstimatedPrice = 280.00m,
                            Notes = "För exakt mätning av utrymme",
                            ReservationId = 1,
                            ToolId = 6
                        });
                });

            modelBuilder.Entity("TooliRent.Models.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PricePerDay")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Tools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Bosch",
                            CategoryId = 1,
                            Description = "Professionell slagborrmaskin för betong och murning",
                            IsAvailable = true,
                            Model = "GSB 13 RE",
                            Name = "Slagborrmaskin",
                            PricePerDay = 45.00m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Makita",
                            CategoryId = 1,
                            Description = "125mm vinkelslip för kapning och slipning",
                            IsAvailable = true,
                            Model = "GA5030",
                            Name = "Vinkelslip",
                            PricePerDay = 35.00m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Festool",
                            CategoryId = 1,
                            Description = "Precisionsticksåg med pendelfunktion",
                            IsAvailable = true,
                            Model = "PS 420 EBQ",
                            Name = "Sticksåg",
                            PricePerDay = 55.00m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Stanley",
                            CategoryId = 2,
                            Description = "Kluvspark 450g med glasfiberhandtag",
                            IsAvailable = true,
                            Model = "STHT0-51309",
                            Name = "Hammare",
                            PricePerDay = 15.00m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Wera",
                            CategoryId = 2,
                            Description = "Set med 6 isolerade skruvmejslar",
                            IsAvailable = true,
                            Model = "Kraftform Plus",
                            Name = "Skruvmejselset",
                            PricePerDay = 20.00m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 6,
                            Brand = "Leica",
                            CategoryId = 3,
                            Description = "Precision laserdistansmätare upp till 100m",
                            IsAvailable = true,
                            Model = "DISTO D2",
                            Name = "Lasermätare",
                            PricePerDay = 40.00m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 7,
                            Brand = "Stabila",
                            CategoryId = 3,
                            Description = "Aluminium vattenpass 60cm med 3 libeller",
                            IsAvailable = true,
                            Model = "70-2",
                            Name = "Vattenpass",
                            PricePerDay = 25.00m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 8,
                            Brand = "3M",
                            CategoryId = 4,
                            Description = "Ventilerad skyddshjälm med justerbart huvudband",
                            IsAvailable = true,
                            Model = "SecureFit X5000",
                            Name = "Skyddshjälm",
                            PricePerDay = 10.00m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 9,
                            Brand = "Uvex",
                            CategoryId = 4,
                            Description = "Skyddsglasögon med anti-imma coating",
                            IsAvailable = false,
                            Model = "i-vo",
                            Name = "Skyddsglasögon",
                            PricePerDay = 8.00m,
                            Status = "Maintenance"
                        });
                });

            modelBuilder.Entity("TooliRent.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Leon.Johanssonsens@example.com",
                            FirstName = "Leon",
                            LastName = "Johansson",
                            PasswordHash = "Adminpower",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "DoeTheJohn@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PasswordHash = "password123",
                            Role = "Member"
                        },
                        new
                        {
                            Id = 3,
                            Email = "StarTrekFan@example.com",
                            FirstName = "Petter",
                            LastName = "Boström",
                            PasswordHash = "Maythe4",
                            Role = "Member"
                        });
                });

            modelBuilder.Entity("TooliRent.Models.OrderDeatils", b =>
                {
                    b.HasOne("TooliRent.Models.Reservation", "Reservation")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TooliRent.Models.Tool", "Tool")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TooliRent.Models.User", "User")
                        .WithMany("OrderDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Tool");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TooliRent.Models.Reservation", b =>
                {
                    b.HasOne("TooliRent.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TooliRent.Models.ReservationTool", b =>
                {
                    b.HasOne("TooliRent.Models.Reservation", "Reservation")
                        .WithMany("ReservationTools")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TooliRent.Models.Tool", "Tool")
                        .WithMany("ReservationTools")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("TooliRent.Models.Tool", b =>
                {
                    b.HasOne("TooliRent.Models.Category", "Category")
                        .WithMany("Tools")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TooliRent.Models.Category", b =>
                {
                    b.Navigation("Tools");
                });

            modelBuilder.Entity("TooliRent.Models.Reservation", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ReservationTools");
                });

            modelBuilder.Entity("TooliRent.Models.Tool", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ReservationTools");
                });

            modelBuilder.Entity("TooliRent.Models.User", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
